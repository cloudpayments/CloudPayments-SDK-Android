apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "ru.cloudpayments.demo"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def sh = ""
                if (!variant.buildType.isDebuggable()) {
                    sh = getGitShortName()
                }
                def branch = getGitCurrentBranch()
                outputFileName = "${variant.name}-${variant.versionName}(${defaultConfig.versionCode})${sh}_[${branch}].apk"
            }
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

def getGitShortName() {
    def stdout = new ByteArrayOutputStream()

    try {
        exec {
            commandLine 'git', 'rev-parse', '--short', 'HEAD'
            standardOutput = stdout
        }
    } catch (Exception e) {

    }

    return stdout.toString().trim()
}

def getGitCurrentBranch() {
    def stdout = new ByteArrayOutputStream()

    try {
        exec {
            commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
            standardOutput = stdout
        }
    } catch (Exception e) {

    }

    return stdout.toString().trim()
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'

    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.fragment:fragment-ktx:1.3.5'
    implementation 'androidx.arch.core:core-runtime:2.1.0'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // material dialogs
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.okhttp3:okhttp:$okHttp3Version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttp3Version"

    implementation 'ru.tinkoff.decoro:decoro:1.5.0'

    implementation 'com.google.android.gms:play-services-wallet:18.1.3'

    //Multidex support
    implementation 'androidx.multidex:multidex:2.0.1'

    // dagger2
    implementation "com.google.dagger:dagger:$dagger2Version"
    implementation "com.google.dagger:dagger-android:$dagger2Version"
    implementation "com.google.dagger:dagger-android-support:$dagger2Version"
    kapt "com.google.dagger:dagger-compiler:$dagger2Version"
    kapt "com.google.dagger:dagger-android-processor:$dagger2Version"

    // image loading and caching
    implementation 'com.github.bumptech.glide:glide:4.11.0'

    //card io scanner
    implementation 'io.card:android-sdk:5.5.0'

    implementation project(path: ':sdk')
}

ext {
    retrofitVersion = '2.5.0'
    okHttp3Version = '3.8.0'
}